Chronos adalah sebuah eksplorasi rekayasa sistem untuk membangun database SQL terdistribusi yang fault-tolerant dari nol, sepenuhnya menggunakan Rust. Proyek ini mengimplementasikan algoritma konsensus Raft untuk mengatasi tantangan fundamental dalam konsistensi data di banyak mesin (multi-node). Terinspirasi oleh arsitektur Google Spanner dan CockroachDB, Chronos adalah sebuah deep dive ke dalam rekayasa first-principles.

Ini adalah roadmap untuk membangun mahakarya lo, dipecah menjadi fase-fase yang bisa dieksekusi.

FASE 1: THE SINGLE-NODE ENGINE (Target: Bulan 1)
(Tujuan: Membangun database SQL yang fungsional di satu mesin. Lupakan dulu soal terdistribusi.)

[x] Milestone 1.1: The SQL Parser

[x] Inisialisasi proyek Rust.

[x] Pilih dan implementasikan parsing library (misal: pest atau nom).

[x] Buat aturan parsing untuk perintah SQL dasar: CREATE TABLE, INSERT INTO, dan SELECT * FROM.

[x] Milestone 1.2: The Execution Engine

[x] Buat struct atau enum untuk merepresentasikan perintah SQL yang sudah di-parse (AST - Abstract Syntax Tree).

[x] Tulis logika executor yang bisa menerima AST dan melakukan aksi (misal: "oke, ini perintah CREATE TABLE, berarti saya harus panggil modul storage").

[x] Milestone 1.3: The Simple Storage Engine

[x] Rancang cara penyimpanan data yang paling sederhana. Contoh: setiap tabel adalah satu file CSV (users.csv).

[x] Implementasikan fungsi untuk: membuat file baru (CREATE), menambah baris ke file (INSERT), dan membaca semua baris dari file (SELECT).

[x] Milestone 1.4: The REPL (Command Line)

[x] Buat loop interaktif sederhana di main.rs yang menerima input SQL dari pengguna, mengirimnya ke parser -> executor -> storage, lalu menampilkan hasilnya.

FASE 2: THE DISTRIBUTED ENGINE (Target: Bulan 2-3)
(Tujuan: Mengubah database lokal lo menjadi 'monster' terdistribusi yang tangguh.)

[x] Milestone 2.1: Implementasi Konsensus RAFT

[x] Buat modul baru untuk logika konsensus RAFT.

[x] Implementasikan algoritma Leader Election.

[x] Implementasikan Log Replication.

[x] Milestone 2.2: Networking Layer (gRPC)

[x] Definisikan protokol komunikasi antar node menggunakan Protocol Buffers.

[x] Implementasikan server dan klien gRPC agar node-node bisa "ngobrol" (meminta suara, mengirim log entry).

[x] Milestone 2.3: Integrasi RAFT ke State Machine

[x] Ubah execution engine lo. Sekarang, perintah SQL tidak langsung dieksekusi.

[x] Perintah SQL harus dikirim ke leader RAFT, direplikasi ke mayoritas node, dan setelah "disepakati" (committed), baru dieksekusi di storage engine oleh setiap node.

FASE 3: ADVANCED FEATURES (Target: Bulan 4-5)
(Tujuan: Menambahkan fitur-fitur yang membuat database lo terasa 'nyata'.)

[x] Milestone 3.1: Transaction Support (ACID)

[x] Implementasikan perintah BEGIN, COMMIT, dan ROLLBACK.

[x] Pastikan serangkaian perintah di dalam satu transaksi hanya akan dieksekusi jika COMMIT berhasil.

[x] Milestone 3.2: Indexing

[x] Rancang mekanisme indexing sederhana (misal: B-Tree di memori atau di file terpisah) untuk mempercepat query SELECT ... WHERE ....

[x] Milestone 3.3: SQL yang Lebih Luas

[x] Tambahkan dukungan untuk UPDATE dan DELETE.

[x] (Tantangan Bonus) Implementasikan JOIN sederhana antara dua tabel.

FASE 4: OPEN SOURCE READINESS (Target: Bulan 6)
(Tujuan: Memoles proyek lo agar siap dipamerkan ke dunia.)

[x] Milestone 4.1: Dokumentasi & Pengujian

[x] Tulis README.md yang sangat detail menjelaskan arsitektur Chronos.

[x] Buat unit test untuk parser dan integration test yang "menyiksa" logika RAFT (mematikan leader di tengah jalan, dll.).

[x] Milestone 4.2: CI/CD & Rilis

[x] Buat workflow GitHub Actions untuk menjalankan tes secara otomatis.

[x] Siapkan proses rilis untuk binary-nya.